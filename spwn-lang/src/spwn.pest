
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)* ~ "\n")}
WHITESPACE = _{ " " | "\t"}

async_arrow  = {"->"}

stmt  = {
    async_arrow? ~ (def | add_obj | if_stmt | for_loop | call | error | retrn | implement | expr)
}

def = {(symbol | "*") ~ "=" ~ (expr) ~ native_prop*}
call = {variable ~ "!"}
retrn = {"return" ~ expr?}
add_obj = {"add" ~ expr}
implement = {"impl" ~ variable ~ dictionary}
//async_call = {"->" ~ variable}
for_loop = {"for" ~ symbol ~ "in" ~ expr ~ lb? ~ cmp_stmt}
error = {"error" ~ expr}

if_stmt = {"if" ~ expr ~ lb? ~ cmp_stmt ~ lb? ~ ("else" ~ lb? ~ (cmp_stmt | if_else))?}
if_else = {if_stmt_container_i_need_for_some_reason}
if_stmt_container_i_need_for_some_reason = {if_stmt}

native_prop = {"#" ~ (private /*| id_define*/) ~ arguments}
    private =   {"private"}
    //id_define = "id_define"


cmp_stmt = {
    "{" ~ ss* ~ (stmt ~ ss+)* ~ stmt? ~ "}"
}

dict_def = {symbol ~ ":" ~ expr}
dict_extract = {".." ~ expr}
dictionary = {
    "{" ~ lb? ~ ((dict_def | dict_extract) ~ "," ~ lb?)* ~ (dict_def | dict_extract)? ~ lb? ~ "}"
}

array = {
    "[" ~ lb? ~ (expr ~ "," ~ lb?)* ~ expr? ~ lb? ~ "]"
}

obj = {
    "obj" ~ "{" ~ lb? ~ (obj_prop ~ "," ~ lb?)* ~ obj_prop? ~ lb? ~ "}"
}

macro_def = {arguments_def ~ cmp_stmt}

obj_prop = {expr ~ ":" ~ expr}

import = {"import" ~ variable}


value_literal = _{
    import | id | number | obj | macro_def | dictionary | 
    cmp_stmt | bool | symbol | string | 
    array | "(" ~ expr ~")"
}

variable = {unary_operator? ~ value_literal ~ (("." ~ symbol) | index | arguments)*}

arg = {symbol ~ "=" ~ expr | expr}
arguments = { "(" ~ (arg ~ ",")* ~ arg? ~ ")" }
index = {"[" ~ expr ~ "]"}

arg_def = {symbol ~ ":" ~ expr | symbol}
arguments_def = {
    "(" ~ (arg_def ~ ",")* ~ arg_def? ~ ")"
}

number = @{("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? }

expr = {(variable ~ operator)* ~ variable}

operator = {("||" | "&&" | "==" | "!=" | "->") | 
			(">=" | "<=" | ">" | "<") | 
            ("/" | "*" | "^") | 
            ("+" | "-")}

unary_operator = {"-" | "!"}

bool = {"true" | "false"}

id = {
    (number | "?") ~ className
}

className = {"g" | "b" | "c" | "i"}

symbol = ${(ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")*}

string = {("\"" ~ (!"\"" ~ ANY)* ~ "\"") | ("'" ~ (!"'" ~ ANY)* ~ "'")}

ss = _{(("\r" | "\n") | ";") ~ ("\r" | "\n")*}
lb = _{("\r" | "\n")*}

spwn = { SOI ~ ss* ~ (stmt ~ ss+)* ~ stmt? ~ EOI }

