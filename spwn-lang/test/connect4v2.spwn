extract import "std.spwn"

player_pieces = [
	[ 1g,  3g,  5g,  7g,  9g, 11g, 13g],
	[15g, 17g, 19g, 21g, 23g, 25g, 27g],
	[31g, 33g, 35g, 37g, 39g, 41g, 43g],
	[29g, 45g, 55g, 61g, 63g, 73g, 75g],
	[47g, 49g, 57g, 65g, 67g, 77g, 79g],
	[51g, 53g, 59g, 69g, 71g, 81g, 83g],
]
ai_pieces = [
	[ 2g,  4g,  6g,  8g, 10g, 12g, 14g],
	[16g, 18g, 20g, 22g, 24g, 26g, 28g],
	[32g, 34g, 36g, 38g, 40g, 42g, 44g],
	[30g, 46g, 56g, 62g, 64g, 74g, 76g],
	[48g, 50g, 58g, 66g, 68g, 78g, 80g],
	[52g, 54g, 60g, 70g, 72g, 82g, 84g],
]

for y in 0..6 {
	for x in 0..7 {
		player_pieces[y][x].toggle_off()
		ai_pieces[y][x].toggle_off()
	}
}

toggle_piece = (x, y, piece_type) {
	if piece_type == 1 {
		//player
		player_pieces[5 - y][x].toggle_on()
	} else {
		//ai
		ai_pieces[5 - y][x].toggle_on()
	}
}

selector_arrow = 85g
selected_col = mut(3)


allow_player_input = mut(true)

on(touch(dual_side = true), {
	allow_player_input.item.if_is(EQUAL_TO, 1, {
		selected_col.add(1)
		selector_arrow.move(20, 0)
		
		selected_col.item.if_is(LARGER_THAN, 6, {
			selected_col.add(-7)
			selector_arrow.move(-140, 0)
		})
	})
})


reader = {
	block: 5b,
	group: 93g,
	on_player: 5b.create_tracker_item(1b),
	on_ai: 5b.create_tracker_item(2b)
}

164g.follow(reader.group) //thread readers follow reader


thread_readers = [
	[[ 6b.create_tracker_item(1b),  6b.create_tracker_item(2b)],
	[ 7b.create_tracker_item(1b),  7b.create_tracker_item(2b)],
	[ 8b.create_tracker_item(1b),  8b.create_tracker_item(2b)]],

	[[ 9b.create_tracker_item(1b),  9b.create_tracker_item(2b)],
	[10b.create_tracker_item(1b), 10b.create_tracker_item(2b)],
	[11b.create_tracker_item(1b), 11b.create_tracker_item(2b)]],

	[[12b.create_tracker_item(1b), 12b.create_tracker_item(2b)],
	[13b.create_tracker_item(1b), 13b.create_tracker_item(2b)],
	[14b.create_tracker_item(1b), 14b.create_tracker_item(2b)]],

	[[15b.create_tracker_item(1b), 15b.create_tracker_item(2b)],
	[16b.create_tracker_item(1b), 16b.create_tracker_item(2b)],
	[17b.create_tracker_item(1b), 17b.create_tracker_item(2b)]],

	[], //up, useless

	[[18b.create_tracker_item(1b), 18b.create_tracker_item(2b)],
	[19b.create_tracker_item(1b), 19b.create_tracker_item(2b)],
	[20b.create_tracker_item(1b), 20b.create_tracker_item(2b)]],

	[[21b.create_tracker_item(1b), 21b.create_tracker_item(2b)],
	[22b.create_tracker_item(1b), 22b.create_tracker_item(2b)],
	[23b.create_tracker_item(1b), 23b.create_tracker_item(2b)]],

	[[24b.create_tracker_item(1b), 24b.create_tracker_item(2b)],
	[25b.create_tracker_item(1b), 25b.create_tracker_item(2b)],
	[26b.create_tracker_item(1b), 26b.create_tracker_item(2b)]],
]

longest_player_thread = mut(0)
longest_ai_thread = mut(0)

$.print(longest_player_thread.item, ",", longest_ai_thread.item)

// when this item turns to 1, it means the process can move forward
ready_sign = ?i



$.print("ready_sign: ", ready_sign)

wait_for_ready = () {
	closure = {
		on(ready_sign.count(1), {
			ready_sign.add(-1)
			wait(0.05)
			closure.stop()
			return
		})
	}

	
	closure!
}


find_threads = {
	-> longest_player_thread.add(-longest_player_thread.to_const(1..4))
	-> longest_ai_thread.add(-longest_ai_thread.to_const(1..4))
	wait(0.3)
	for i in 0..thread_readers.length {
		t = thread_readers[i]
		$.print(t)
		if t.length > 0 {
			() {
				//player piece
				t[0][0].if_is(EQUAL_TO, 1, {

					triple = {
						-> longest_player_thread.add(
							3 - longest_player_thread.to_const([0,1,2])
						)
			
						//leave
						ready_sign.add(1)
					}

					double = {
						//len = 2

						-> longest_player_thread.add(
							2 - longest_player_thread.to_const([0,1])
						)

						return
					}
					t[1][0].if_is(EQUAL_TO, 1, {
						t[2][0].if_is(EQUAL_TO, 1, triple)
		
						t[2][0].if_is(EQUAL_TO, 0, {
							oposite = thread_readers[(i + 4) % thread_readers.length]
							if oposite.length != 0 {
								oposite[1][0].if_is(EQUAL_TO, 1, triple)

								oposite[1][0].if_is(EQUAL_TO, 0, double)
							} else {
								double
							}
						})
					})

					t[1][0].if_is(EQUAL_TO, 0, {
						//len = 1
						longest_player_thread.item.if_is(EQUAL_TO, 0, {
							longest_player_thread.add(1)
						})
						return
					})
				})

				//ai piece
				t[0][1].if_is(EQUAL_TO, 1, {
					triple = {
						-> longest_ai_thread.add(
							3 - longest_ai_thread.to_const([0, 1, 2])
						)
						
						//leave
						ready_sign.add(1)
					}
					double = {
						//len = 2

						-> longest_ai_thread.add(
							2 - longest_ai_thread.to_const([0, 1])
						)

						return
					}
					t[1][1].if_is(EQUAL_TO, 1, {
						t[2][1].if_is(EQUAL_TO, 1, triple)
		
						t[2][1].if_is(EQUAL_TO, 0, {
							oposite = thread_readers[(i + 4) % thread_readers.length]
							if oposite.length != 0 {
								oposite[1][0].if_is(EQUAL_TO, 1, triple)

								oposite[1][0].if_is(EQUAL_TO, 0, double)
							} else {
								double
							}
						})
					})

					t[1][1].if_is(EQUAL_TO, 0, {
						//len = 1
						longest_ai_thread.item.if_is(EQUAL_TO, 0, {
							longest_ai_thread.add(1)
						})
						return
					})
				})

				
				t[0][0].if_is(EQUAL_TO, 0, {
					//first piece is empty, so return
					t[0][1].if_is(EQUAL_TO, 0, {
						return
					})
				})
			} ()
			
		}
		
	}
	
	ready_sign.add(1)
}



$.print("on_player: ", reader.on_player)

origin = 94g

move_reader_back = {
	reader.group.move_to(origin)
}


turn = mut(1)



y_pos = mut(0)

move_to_air = {

	
	
	check = {
		move_up = {
			reader.group.move(0, 20)
			y_pos.add(1)
			call_with_delay(0.05, check)
		}
		reader.on_player.if_is(EQUAL_TO, 1, move_up)
		reader.on_ai.if_is(EQUAL_TO, 1, move_up)

		reader.on_player.if_is(EQUAL_TO, 0, {
			reader.on_ai.if_is(EQUAL_TO, 0, {ready_sign.add(1)})
		})
	}
	wait(0.05)
	check!
	
}


on(collision(3b, 4b), {
	allow_player_input.item.if_is(EQUAL_TO, 1, {
		
		reader.group.move_to(selector_arrow);
		reader.group.move(0, -20)
		wait(0.05)


		reader.on_player.if_is(EQUAL_TO, 0, {
			reader.on_ai.if_is(EQUAL_TO, 0, {
				allow_player_input.add(-1)
				reader.group.move(0, -100)
				wait(0.05)
				
				$.print(y_pos.item)

				move_to_air!
				wait_for_ready()

				-> (){
					x_pos = selected_col.to_const(0..7)
					y_pos = y_pos.to_const(0..6)
					toggle_piece(x_pos, y_pos, 1)
				}()

				-> y_pos.add(-y_pos.to_const(1..7))
			
				find_threads!
				
				wait_for_ready()
				longest_player_thread.item.if_is(EQUAL_TO, 3, {
					BG.pulse(0, 255, 0, fade_out = 1)
				})

				wait(0.05)
				turn.add(-2)
			})
		})
		
		
	})
	
})

on(turn.item.count(-1), {
	move_reader_back!
	wait(0.05)

	ai_selected = mut(0)

	check_column = (move, next) {
		reader.group.move(move * 20, 0)
		ai_selected.add(move)

		wait(0.05)
		
		
		reader.on_player.if_is(EQUAL_TO, 1, next)
		reader.on_ai.if_is    (EQUAL_TO, 1, next)

		
		
	}

	

	check_column(3, {
		check_column(-1, {
			check_column(2, {
				check_column(-3, {
					check_column(4, {
						check_column(-5, {
							check_column(6, {
								//draw
								999g!
							})
						})
					})
				})
			})
		})
	})
	wait(0.35)

	
	

	reader.group.move(0, -100)
	move_to_air!
	wait_for_ready()

	-> (){
		x_pos = ai_selected.to_const(0..7)
		y_pos = y_pos.to_const(0..6)
		toggle_piece(x_pos, y_pos, -1)
		ai_selected.add(-x_pos)
	}()

	-> y_pos.add(-y_pos.to_const(1..7))

	find_threads!
	wait_for_ready()
	longest_ai_thread.item.if_is(EQUAL_TO, 3, {
		BG.pulse(255, 0, 0, fade_out = 1)
	})

	turn.add(2)
	allow_player_input.add(1)




	
})