

extract import "std.spwn"

extract obj_props

main = counter(1i)


//shows a number between 0 and 20
random_num = counter(0)

//chose number
difficulty = counter(0)


set_to_random = {
	numbers = [
		[25,33,21,154,21,4,6,63,10,75,30,55,42,22,12,44,35,42,14,154,55],
		[315,225,49,44,315,84,121,275,15,121,14,462,441,126,14,550,6,154,40,6,21,],
		[847,1100,30,90,630,1925,924,147,1650,75,1210,180,99,5145,945,30,3234,490,1078,1470,210,],
		[1155,462,5082,25410,84,378,2101,18150,198,1225,2475,210,19965,12705,132,232925,4125,1650,5500,13475,135,],
	]
	
	num = numbers[difficulty.to_const(0..4)][random_num.to_const(0..21)]
	main.item.add(num)
}


increase = {
	random_num.item.add(1)
	random_num.item.if_is(LARGER_THAN, 20, {
		random_num.item.add(-21)
	})
	call_with_delay(0.1, increase)
}

increase!



on(touch_end(true), {
	random_num.item.if_is(SMALLER_THAN, 17, {
		random_num.item.add(3)
	})
})

on(collision_exit(1b, 2b), {
	random_num.item.if_is(SMALLER_THAN, 15, {
		random_num.item.add(5)
	})
})

on(touch(true), {
	random_num.item.if_is(LARGER_THAN, 2, {
		random_num.item.add(-2)
	})
})


on(collision(1b, 2b), {
	random_num.item.if_is(LARGER_THAN, 4, {
		random_num.item.add(-4)
	})
})



//set num display
digits = [
	{
		roll: 2g,
		target: 7g,
		anchors: [12g, 17g, 22g, 27g, 32g, 37g, 42g, 47g, 52g, 57g]
	},

	{
		roll: 3g,
		target: 8g,
		anchors: [13g, 18g, 23g, 28g, 33g, 38g, 43g, 48g, 53g, 58g]
	},

	{
		roll: 4g,
		target: 9g,
		anchors: [14g, 19g, 24g, 29g, 34g, 39g, 44g, 49g, 54g, 59g]
	},

	{
		roll: 5g,
		target: 10g,
		anchors: [15g, 20g, 25g, 30g, 35g, 40g, 45g, 50g, 55g, 60g]
	},

	{
		roll: 6g,
		target: 11g,
		anchors: [16g, 21g, 26g, 31g, 36g, 41g, 46g, 51g, 56g, 61g]
	},
]

for d in digits {
	d.roll.follow(d.target)
}


set_display = {
	referance = main.clone(10)
	for digit in 5..0 {
		for i in 0..10 {
			lower_end = i * (10^digit)
			higher_end = (i + 1) * (10^digit)
			referance.item.if_is(LARGER_THAN, lower_end - 1, {
				referance.item.if_is(SMALLER_THAN, higher_end, {
					-> digits[digit].target.move_to(digits[digit].anchors[i], 0.5, easing = EASE_IN_OUT)
					referance.item.add(-lower_end)
				})
			})
		}
	}
}

wait(1)

set_to_random!
call_with_delay(0.1, set_display)


selected_number = counter(0)

button_anchors = [63g, 64g, 65g, 66g, 67g, 69g]
select_box = 68g

on(touch(true), {
	selected_number.item.add(1)
	selected_number.item.if_is(EQUAL_TO, 6, {selected_number.item.add(-6)})
	-> select_box.move_to(button_anchors[selected_number.to_const(0..6)], 0)
})

check_if_solved = {
	main.item.if_is(EQUAL_TO, 1, {
		1001c.pulse(100,  255, 100, fade_out = 1)
		main.item.add(-1)
		set_to_random!
		call_with_delay(0.1, set_display)
	})
}

kill_player = {
	72g.move(0, -10)
}

on(collision(1b, 2b), {
	divisor = [2,3,5,7,11][selected_number.to_const(0..5)]
	rest = main.divide(divisor, 15)
	rest.item.if_is(LARGER_THAN, 0, kill_player)
	set_display!
	call_with_delay(1, check_if_solved)
})



	
	















