

board = [
	[mut(1i ), mut(2i ), mut(3i ), mut(4i ), mut(5i ), mut(6i ), mut(7i )],
	[mut(8i ), mut(9i ), mut(10i), mut(11i), mut(12i), mut(13i), mut(14i)],
	[mut(15i), mut(16i), mut(17i), mut(18i), mut(19i), mut(20i), mut(21i)],
	[mut(22i), mut(23i), mut(24i), mut(25i), mut(26i), mut(27i), mut(28i)],
	[mut(29i), mut(30i), mut(31i), mut(32i), mut(33i), mut(34i), mut(35i)],
	[mut(36i), mut(37i), mut(38i), mut(39i), mut(40i), mut(41i), mut(42i)],
]

// when this item turns to 1, it means the process can move forward
ready_sign = ?i

selector_obj = 40g

wait_for_ready = () {
	closure = {
		on(ready_sign.count(1), {
			ready_sign.add(-1)
			wait(0.05)
			closure.stop()
			return
		})
	}
	closure!
}




gfb_vars = {
	x: mut(51i),
	y: mut(52i),
	result: mut(50i),
}

move_x = (amount) {
	gfb_vars.x.add(amount)
	selector_obj.move(20 * amount, 0)
}

move_y = (amount) {
	gfb_vars.y.add(amount)
	selector_obj.move(0, -20 * amount)
}

gfb_read = {
	
	for x in 0..7 {
		for y in 0..6 {
			gfb_vars.x.item.if_is(EQUAL_TO, x, {
				gfb_vars.y.item.if_is(EQUAL_TO, y, {
					board[y][x].item.if_is(SMALLER_THAN, 0, {
						gfb_vars.result.add(-1)
						
					})
					board[y][x].item.if_is(LARGER_THAN, 0, {
						gfb_vars.result.add(1)
						
					})
				})
			})
			
		}
	}
	
}

gfb_write = {
	for x in 0..7 {
		for y in 0..6 {
			gfb_vars.x.item.if_is(EQUAL_TO, x, {
				gfb_vars.y.item.if_is(EQUAL_TO, y, {
					gfb_vars.result.item.if_is(SMALLER_THAN, 0, {
						board[y][x].add(-1)
						
					})
					gfb_vars.result.item.if_is(LARGER_THAN, 0, {
						board[y][x].add(1)
						
					})
				})
			})
			
		}
	}
}

get_from_board = () {
	gfb_read!
	wait(0.02)
}

write_to_board = () {
	gfb_write!
	wait(0.02)
}

//player move
allow_player_input = mut(1)

selected_col = mut(3); //middle
$.print("selected col: ", selected_col.item)
selector_arrow = 1g



on(touch(dual_side = true), {
	allow_player_input.item.if_is(EQUAL_TO, 1, {
		selected_col.add(1)
		selector_arrow.move(20, 0)
		
		selected_col.item.if_is(LARGER_THAN, 6, {
			selected_col.add(-7)
			selector_arrow.move(-140, 0)
		})
	})
})

player_turn = mut(100i)
player_turn.add(1)

reset_selector_x = {
	-> move_x(-gfb_vars.x.to_const(1..7))
}

reset_selector_y = {
	-> move_y(-gfb_vars.y.to_const(1..6))
}


reset_result = {
	gfb_vars.result.add(-gfb_vars.result.to_const([-1, 1]))
}

if_result_not_zero = (f) {
	gfb_vars.result.item.if_is(SMALLER_THAN, 0, f)
	gfb_vars.result.item.if_is(LARGER_THAN, 0, f)
}


gfb_move_to_air = {
	() {
		check = {
			go_up = {
				move_y(-1)
				reset_result!
				call_with_delay(0.05, check)
				//check!
			}
			get_from_board()

			gfb_vars.result.item.if_is(EQUAL_TO, 0, {return})
			gfb_vars.result.item.if_is(EQUAL_TO, 1, go_up)
			gfb_vars.result.item.if_is(EQUAL_TO, -1, go_up)
			
		}
		check!
	} ()
	wait(0.01)
	ready_sign.add(1)
}

longest_player_thread = mut(?i)
longest_ai_thread = mut(?i)

reset_lpt = {
	longest_player_thread.add(-longest_player_thread.to_const(1..4))
}
reset_lat = {
	longest_ai_thread.add(-longest_ai_thread.to_const(1..4))
}

DEBUG_MODE = true

find_threads = {
	//look for a thread in each direction
	go_to_next_sign = ?i

	

	wait_for_next_ready = () {
		closure = {
			ret = {
				//wait(0.05)
				closure.stop()
				return
			}
			on(go_to_next_sign.count(1), {
				go_to_next_sign.add(-1)
				ret!
			})

			on(go_to_next_sign.count(2), {
				go_to_next_sign.add(-2)
				ret!
			})
		}
		closure!
	}

	look_x = mut(1)
	look_y = mut(0)
	thread_type = mut(0)
	$.print("longest player thread:", longest_player_thread.item, "longest ai thread:", longest_ai_thread.item)

	reset_thread_type = {
		thread_type.add(-thread_type.to_const([-1, 1]))
	}

	move_select = {
		-> move_x(look_x.to_const([-1, 1]))
		-> move_y(look_y.to_const([-1, 1]))
	}

	move_select_back = {
		-> move_x(-look_x.to_const([-1, 1]))
		-> move_y(-look_y.to_const([-1, 1]))
	}

	check_dir = {
		//wait(1)
		
		selector_obj.pulse(255, 0, 0, fade_out = 0.5)
		move_select!
		wait(0.05)
		get_from_board()
		
		-> thread_type.add(gfb_vars.result.to_const([-1, 1]))
		

		
	
		gfb_vars.result.item.if_is(EQUAL_TO, 0, {
			reset_result!
			move_select_back!
			go_to_next_sign.add(1)
		})

		if_result_not_zero({
			reset_result!
			//second in thread
			move_select!
			wait(0.05)
			get_from_board()

			next = {
				reset_result!
				//third in thread
				move_select!
				wait(0.05)
				get_from_board()

				found = {
					//found thread of three
					thread_type.item.if_is(EQUAL_TO, 1, {
						longest_player_thread.add(3)
					})

					thread_type.item.if_is(EQUAL_TO, -1, {
						longest_ai_thread.add(3)
					})
					reset_result!
					wait(0.05)
					
					//go out of function, no need to check the rest
					go_to_next_sign.add(2) 
					ready_sign.add(1) 
				}
				failed3 = {
					reset_result!
					//check back
					for i in [1, 2, 3, 4] { 
						move_select_back!
					}

					wait(0.05)
					get_from_board()
					
					-> gfb_vars.result.item.if_is(EQUAL_TO, thread_type.to_const([-1, 1]), {
						move_select!
						reset_result!
						found!
					})
					failed2 = {
						//two in a row after target
						reset_result!

						thread_type.item.if_is(EQUAL_TO, 1, {
							longest_player_thread.item.if_is(SMALLER_THAN, 2, {
								longest_player_thread.item.if_is(EQUAL_TO, 1, {longest_player_thread.add(-1)})
								longest_player_thread.add(2)
							})
						})

						thread_type.item.if_is(EQUAL_TO, -1, {
							longest_ai_thread.item.if_is(SMALLER_THAN, 2, {
								longest_ai_thread.item.if_is(EQUAL_TO, 1, {longest_player_thread.add(-1)})
								longest_ai_thread.add(2)
							})
						})
						move_select!
						go_to_next_sign.add(1)
					}
					gfb_vars.result.item.if_is(EQUAL_TO, 0, failed2)
					-> gfb_vars.result.item.if_is(EQUAL_TO, -thread_type.to_const([-1, 1]), failed2)
				}
				gfb_vars.result.item.if_is(EQUAL_TO, 0, failed3)
				-> gfb_vars.result.item.if_is(EQUAL_TO, -thread_type.to_const([-1, 1]), failed3)

				-> gfb_vars.result.item.if_is(EQUAL_TO, thread_type.to_const([-1, 1]), {
					for i in [1, 2, 3] {
						move_select_back!	
					}
					found!
				})

			}
			failed = {
				reset_result!

				thread_type.item.if_is(EQUAL_TO, 1, {
					longest_player_thread.item.if_is(EQUAL_TO, 0, {
						longest_player_thread.add(1)
					})
				})

				thread_type.item.if_is(EQUAL_TO, -1, {
					longest_ai_thread.item.if_is(EQUAL_TO, 0, {
						longest_ai_thread.add(1)
					})
				})
				move_select_back!
				wait(0.05)
				move_select_back!
				go_to_next_sign.add(1)
			}
			wait(0.05)
			gfb_vars.result.item.if_is(EQUAL_TO, 0, failed)
			-> gfb_vars.result.item.if_is(EQUAL_TO, -thread_type.to_const([-1, 1]), failed)
			-> gfb_vars.result.item.if_is(EQUAL_TO, thread_type.to_const([-1, 1]), next)
			

			
		})
	}
	


	//look to the right
	check_dir!
	wait_for_next_ready()
	reset_thread_type!
	

	
	
	//look to the left
	look_x.add(-2)

	//wait(0.05)

	check_dir!
	wait_for_next_ready()
	reset_thread_type!
	
	//look down (0, 1)
	look_x.add(1)
	look_y.add(1)

	//wait(0.05)

	check_dir!
	wait_for_next_ready()
	reset_thread_type!

	//look top right (1, -1)
	look_x.add(1)
	look_y.add(-2)

	//wait(0.05)

	check_dir!
	wait_for_next_ready()
	reset_thread_type!

	//look top left (-1, -1)
	look_x.add(-2)

	//wait(0.05)
	
	check_dir!
	wait_for_next_ready()
	reset_thread_type!

	//look bottom right (1, 1)
	look_y.add(2)
	look_x.add(2)

	//wait(0.05)
	
	check_dir!
	wait_for_next_ready()
	reset_thread_type!

	//look bottom left (-1, 1)
	
	look_x.add(-2)

	//wait(0.05)
	
	check_dir!
	wait_for_next_ready()
	reset_thread_type!
	

	//wait(0.05)
	

	look_x.add(1)
	look_y.add(-1)
	

	ready_sign.add(1)
}

check_player_win = {
	

}

player_wins_label = 10g
player_wins_label.toggle_off()




on(collision(1b, 2b), {
	allow_player_input.item.if_is(EQUAL_TO, 1, {
		
		-> move_x(selected_col.to_const(1..7))
		move_y(5)

		gfb_move_to_air!
		wait_for_ready()
		gfb_vars.y.item.if_is(LARGER_THAN, -1, {
			//set result to 1
			allow_player_input.add(-1)
			gfb_vars.result.add(1)

			wait(0.05)
			write_to_board()
			
			wait(0.05)
			gfb_vars.result.add(-1)
			wait(0.05)
			find_threads!
			wait_for_ready()
			longest_player_thread.item.if_is(EQUAL_TO, 3, {
				player_wins_label.toggle_on()
			})
			wait(0.05)
			

			reset_lpt!
			reset_lat!
			reset_selector_x!
			reset_selector_y!
			//gfb_vars.result.add(-1)
			//set to ai turn
			//wait(0.05)
			player_turn.add(-2)
		})
		gfb_vars.y.item.if_is(EQUAL_TO, -1, {
			move_y(1)
			reset_selector_x!
		})
			
		
	})
})

on(player_turn.item.count(-1), {
	//AI
	check_column = (col, next) {
		board [0][col].item.if_is(EQUAL_TO, 0, {
			move_x(col)
		})
		board [0][col].item.if_is(EQUAL_TO, 1, next)
		board [0][col].item.if_is(EQUAL_TO, -1, next)
	}

	check_column(3, {
		check_column(2, {
			check_column(4, {
				check_column(1, {
					check_column(5, {
						check_column(0, {
							check_column(6, {
								999g! //draw
							})
						})
					})
				})
			})
		})
	})

	move_y(5)
	gfb_move_to_air!
	wait_for_ready()


	//set result to 1
	gfb_vars.result.add(-1)

	wait(0.05)
	write_to_board()
	reset_selector_x!
	reset_selector_y!

	gfb_vars.result.add(1)

	player_turn.add(2)
	allow_player_input.add(1)

	
	/*highest_score = mut(0)
	highest_index = mut(0)

	reset_hindex = {
		-> highest_index.add(-highest_index.to_const(1..7))
		-> highest_index.add(gfb_vars.x.to_const(1..7))
	}

	reset_hscore = {
		highest_score.item.if_is(EQUAL_TO, 1, {highest_score.add(-1)})
	}

	

	check_column = {

		done = {
			//set result to -1
			
			gfb_vars.result.add(-1)
			wait(0.01)
			write_to_board()

			reset_selector_x!
			reset_selector_y!
			gfb_vars.result.add(1)
			//set to player turn
			player_turn.add(2)
			allow_player_input.add(1)
		}

		next = {
			-> longest_ai_thread.add(-longest_ai_thread.to_const([1, 2, 3, 4, 5]))
			-> longest_player_thread.add(-longest_ai_thread.to_const([1, 2, 3, 4, 5]))
			
			gfb_vars.x.item.if_is(LARGER_THAN, 6, done)
			gfb_vars.x.item.if_is(SMALLER_THAN, 7, {
				reset_selector_y!
				move_x(1)
				call_with_delay(0.05, check_column)
			})
			
		}


		move_y(5)
		gfb_move_to_air!
		wait_for_ready()

		find_threads!
		wait_for_ready()
		//if it is not urgent (3 or longer)

		
		longest_ai_thread.item.if_is(SMALLER_THAN, 3, {
			hsconst = () {
				highest_score.item.if_is(EQUAL_TO, 0, {return 0})
				highest_score.item.if_is(EQUAL_TO, 1, {return 1})
				highest_score.item.if_is(EQUAL_TO, 2, {return 2})
				highest_score.item.if_is(LARGER_THAN, 2, {return 3})
			}()
			longest_ai_thread.item.if_is(LARGER_THAN, hsconst, {
				reset_hscore!
				reset_hindex!
				longest_ai_thread.item.if_is(EQUAL_TO, 1, {highest_score.add(1)})
				longest_ai_thread.item.if_is(EQUAL_TO, 2, {highest_score.add(2)})
				longest_ai_thread.item.if_is(LARGER_THAN, 2, {highest_score.add(3)})
				next!
			})
			longest_ai_thread.item.if_is(SMALLER_THAN, hsconst + 1, {
				longest_player_thread.item.if_is(LARGER_THAN, hsconst, {
					reset_hscore!
					reset_hindex!
					longest_player_thread.item.if_is(EQUAL_TO, 1, {highest_score.add(1)})
					longest_player_thread.item.if_is(EQUAL_TO, 2, {highest_score.add(2)})
					longest_player_thread.item.if_is(LARGER_THAN, 2, {highest_score.add(3)})
					next!
				})
			})
		})
		
		longest_ai_thread.item.if_is(LARGER_THAN, 2, done)

	}*/



	
})
