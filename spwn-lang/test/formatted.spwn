let constants = import "constants.spwn"
extract constants.obj_props
extract constants.comparisons
extract constants.easing_types//type implementations

import "group.spwn"
import "color.spwn"
import "item.spwn"
import "block.spwn"
import "counter.spwn"
ctrl_flow = import "control_flow.spwn"
extract ctrl_flow
impl @array {
    max: (self, minval = 0) {
        let highest = minval
        for el in self {
    	    if el > highest {
    		    highest = el
    	    }
        }
        return highest
    },
    min: (self, max_val = 999999999999) {
        let lowest = max_val
        for el in self {
    	    if el < lowest {
    		    lowest = el
    	    }
        }
        return lowest
    },
    contains: (self, el) {
        let ret = false
        for e in self {
    	    if e == el {
    		    ret = true
    		    break
    	    }
        }
        return ret
    },
    push: (self, value) {
        $.append(self, value)
    },
}
// An event in spwn is a macro that returns a macro with one argument
// which is the function that gets triggered on the event
on = #[desc("Triggers a function every time an event fires")] (#[desc("Event to trigger on")] event: @macro, #[desc("Function to trigger")] function: @function) {
    event(function)
}
return {
    obj_props: constants.obj_props,
    ..constants.easing_types,
    ..constants.comparisons,
    ..constants.colors,
    ..import "general_triggers.spwn",
    ..import "events.spwn",
    ..ctrl_flow,
    counter: @counter::new,
    call_with_delay: call_with_delay,
    on: on,
    operation_scale: (new: @number) {
        DEFAULT_SPEED = new
    },
}
