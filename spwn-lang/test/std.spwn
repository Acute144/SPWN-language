
constants = import "constants.spwn"

* = constants.obj_props
* = constants.comparisons

wait = (time){
    add obj{
        OBJ_ID: 1268,
        SPAWN_DURATION: time,
        TARGET: {
            return
        }
    }
}

impl "group" {
    move: (self, x, y, duration: 0, easing: 0, easing_rate: 0) {
        add obj{
            OBJ_ID: 901,
            TARGET: self,
            MOVE_X: x * 3,
            MOVE_Y: y * 3,
            DURATION: duration,
            EASING: easing,
            EASING_RATE: easing_rate,
        }
        wait(duration)
    },

    stop: (self){
        add obj{
            OBJ_ID: 1616,
            TARGET: self,
        }
    },

    alpha: (self, opacity: 1, duration: 0){
        add obj {
            OBJ_ID: 1007,
            TARGET: self,
            OPACITY: opacity,
            DURATION: duration,
        }
        wait(duration)
    },

    toggle_on: (self){
        add obj{
            OBJ_ID: 1049,
            TARGET: self,
            ACTIVATE_GROUP: 1,
        }
    },

    toggle_off: (self){
        add obj{
            OBJ_ID: 1049,
            TARGET: self,
            ACTIVATE_GROUP: 0,
        }
    },

    rotate: (self, center, degrees, duration: 0, easing: 0, easing_rate: 0, lock_object_rotation: 0){
        add obj{
            OBJ_ID: 1346,
            TARGET: self,
            CENTER: center,
            ROTATE_DEGREES: degrees,
            DURATION: duration,
            EASING: easing,
            EASING_RATE: easing_rate,
            LOCK_OBJECT_ROTATION: lock_object_rotation
        }
        wait(duration)
    }
}

impl "color" {
    set: (self, r, g, b, duration: 0, opacity: 1, blending: 0){ //change blending to bool
        add obj{
            OBJ_ID: 899,
            DURATION: duration,
            TRIGGER_RED: r,
            TRIGGER_GREEN: g,
            TRIGGER_BLUE: b,
            OPACITY: opacity,
            BLENDING: blending,
        }
        wait(duration)
    }
}

impl "item" {
    
    add: (self, amount) {
        add obj{
            OBJ_ID: 1817,
            COUNT: amount,
            ITEM: self,
        }
    },

    if_is: (self, comparison, other, function) {
        add obj{
            OBJ_ID: 1811,
            TARGET: function,
            COUNT: other,
            ACTIVATE_GROUP: 1, 
            COMPARISON: comparison, 
            ITEM: self,
        }
    },

    on_count: (self, number: 0, function) {
        add obj{
            OBJ_ID: 1611,
            TARGET: function,
            COUNT: other,
            ACTIVATE_GROUP: 1, 
            ITEM: self,
        }
    },
}

impl "mutable" {
    

    to_const: (self, range) {
        for val in range {
            -> self.item.if_is(EQUAL_TO, val, {
                return val
            }) 
        }
    },
    

    as: (self, type) {
        if type == "bool" {
            return self.const([0, 1]) == 1
        } else {
            error "Cannot convert to this type (mut can convert to a number using the mut.to_const macro)"
        }
    }
}



general_functions = {
    
        
    on_touch: (function) {

        add obj{
            OBJ_ID: 1595,
            HOLD_MODE: true,
            TOGGLE_MODE: 1,
            TARGET: function
        }
    },

    
    
}



exports = {
    //..constants.obj_props,
    ..constants.easing_types,
    ..constants.comparisons,
    ..general_functions,
    
    wait: wait,


    mut: (num){
        id = ?i
        
        id.add(num)
        
        return {
            TYPE: "mutable",
            item: id
        }
    },

    

    
    
}


