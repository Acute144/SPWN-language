// rewrite of the calculator with a more modern version of spwn
// a bit buggy, and a bit slow, but it works

death_group = 92g

limit_text = 93g
no_text = 94g

death_group.toggle_off()
limit_text.toggle_off()
no_text.toggle_off()

main = counter(1i, false)

secondary = counter(2i)
second_display = 81g



remainder_display = counter(3i, false)
show_remainder = {
	91g.move(0, -30, 0.5, EASE_OUT)
	wait(0.5)
	91g.move(0, 30, 0.5, EASE_IN)
}

second_display.alpha(0)

loading_anim = 86g
loading_anim.alpha(0)

loading = counter(0, false) //0 = not loading, 1 = loading

start_loading = {
	-> loading_anim.alpha(1, 1)
	if loading == 0 { loading.item.add(1) }
}

end_loading = {
	-> loading_anim.alpha(0, 0.2)
	if loading == 1 { loading.item.add(-1) }
}

show_secondary = (operator) {
	
	operators = [82g, 83g, 84g, 85g]
	-> second_display.alpha(0.5, 0.5)

	for i in ..4 {
		if i == operator {
			operators[i].toggle_on()
		} else {
			operators[i].toggle_off()
		}
	}
	
}

//generate digits array at compiletime


let digits = []

for d in ..5 {
	let anchors = []
	for a in ..10 {
		anchors.push((a * 5 + 12 + d) as @group)
	}
	roll = (d + 2) as @group
	target = (d + 7) as @group

	roll.follow(target)

	digits.push({
		roll: roll,
		target: target,
		anchors: anchors,
	})
}

set_display = {
	wait()
	referance = main.clone(10)
	for digit in 5..0 {
		for i in 0..10 {
			lower_end = i * (10^digit)
			higher_end = (i + 1) * (10^digit)
			referance.item.if_is(LARGER_THAN, lower_end - 1, {
				referance.item.if_is(SMALLER_THAN, higher_end, {
					-> digits[digit].target.move_to(digits[digit].anchors[i], 0.5, easing = EASE_IN_OUT)
					referance.item.add(-lower_end)
				})
			})
		}
	}
}

last_pressed_operator = counter(0, false) //0 = +, 1 = -, 2 = *, 3 = /, 4 = =
current_operator = counter(0, false)

wait(1)
set_display!

selected_button = counter(0)


select_box = 68g
button_anchors = [75g, 63g, 64g, 65g, 66g, 67g, 69g, 72g, 73g, 74g, 76g, 90g, 77g, 78g, 79g, 80g]

on(touch(true), {
	if loading == 0 {
		selected_button += 1
		if selected_button == button_anchors.length {
			selected_button -= button_anchors.length
		}
		select_box.move_to(
			button_anchors[
				selected_button.to_const(0..button_anchors.length)
			]
		)
	}
})

check_valid = {
	if secondary < 0 || secondary >= 99999 {
		death_group.toggle_on()
		limit_text.toggle_on()
	}
}

solve = {
	start_loading!
	move_from_secondary = {
		secondary.add_to([main.item], speed = 10)
		wait()
		set_display!
	}
	
	if current_operator == 0 {
		//plus
		main.add_to([secondary.item], speed = 10)
		if last_pressed_operator == 4 {
			move_from_secondary!
		}
		
		check_valid!
		end_loading!
	} else if current_operator == 1 {
		//minus
		main.subtract_from([secondary.item], speed = 10)
		
		if last_pressed_operator == 4 {
			move_from_secondary!
		}
		
		
		current_operator.add(-1)
		check_valid!
		end_loading!
	} else if current_operator == 2 {
		//mult
		secondary.multiply(main, 10)
		main.reset(5)
		wait()

		-> if last_pressed_operator == 4 {
			move_from_secondary!
		}
		
		current_operator.add(-2)
		check_valid!
		end_loading!
	}/* else if current_operator == 3 {
		//divide
		-> if main == 0 {
			death_group.toggle_on()
			no_text.toggle_on()
		}
		secondary.divide(main, remainder_display, 4)
		show_remainder!
		

		-> if last_pressed_operator == 4 {
			move_from_secondary!
		}
		set_display!
		current_operator.add(-3)
		check_valid!
		end_loading!
	}*/
	//preserve context split becuase we need the time to match
	if last_pressed_operator == 4 {
		-> second_display.alpha(0, 0.5)
	}
	
}


on(collision(1b, 2b), {
	if loading == 0 {
		last_pressed_operator.reset()
	
		if selected_button < 10 {
			//number panel
			start_loading!
			main.multiply(10, speed = 5)
			-> main.item.add(selected_button.to_const(1..10))
			set_display!
			end_loading!
		} else if selected_button > 11 {
			//operator panel
			wait(0.2)
			-> if secondary > 0 {
				solve!
			}
			wait(0.2)
			-> if secondary == 0 {
				main.add_to([secondary.item], speed = 5)
				set_display!
			}
			
			operator = selected_button.to_const(12..16) - 12
			last_pressed_operator.add(operator)
			show_secondary(operator)
			current_operator.add(operator)
			
			
		} else if selected_button == 10 {
			//equals
			last_pressed_operator.add(4)
			solve!
		} else {
			//reset
			start_loading!
			main.reset(7)
			set_display!
			end_loading!
		}
	}
	
})

