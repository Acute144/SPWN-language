#[no_std]
impl @string {
	substr: #[desc("Gets a substring beginning at the specified start and ending at the specified end.")]
	(self, start: @number, end: @number) {
		return $.substr(self, start, end);
	},
	join: #[desc("Joins a list using the string.")]
	(self, list: @array) {
		let out = "";
		for i in list {
			out += @string(i);
			out += self;
		}
		return out.substr(0, out.length-self.length);	
	},
	split: #[desc("Splits the string by teh specified seperator.")]
	(self, spstr: @string) {
		if spstr.length == 0 {
			return self as @array;
		} else {
			return $.split_str(self, spstr);
		}
	},
	starts_with: #[desc("Checks does the string starts with a string.")]
	(self, substr: @string) {
		return self.substr(0, substr.length) == substr;
	},
	ends_with: #[desc("Checks does the string starts with a string.")]
	(self, substr: @string) {
		return self.substr(self.length-substr.length, self.length) == substr;
	},
	index: #[desc("Gets the index of a string, if it doesn't exists returns null.")]
	(self, substr: @string) {
		r = self.length - substr.length + 1
		for i in 0..r {
			if $.substr(self, i, i + substr.length) == substr {
				return i
			}
		}
		return null
	},
	contains: #[desc("Checks if the string contains a string.")]
	(self, substr: @string) {
		r = self.length - substr.length + 1
		for i in 0..r {
			if $.substr(self, i, i + substr.length) == substr {
				return true
			}
		}
		return false
	},
	reverse: #[desc("Reverses the string.")]
	(self) {
		return ''.join(self.split('').reverse())
	}
}
