#[no_std]
import "array.spwn"

type @dict_not_found;

impl @dictionary {
	is_empty: #[desc("Returns true if there are no entries in the dictionary, false otherwise.")]
	(self) {
		// no way to get number of entries currently afaik
		// so this 'loop' will get skipped over if empty,
		// or otherwise early exit on the first entry if not
		for kv in self {
			return false;
		}
		return true;
	},
	keys: #[desc("Gets the dictionary's keys.")]
	(self) {
		let ret = []
		for kv in self {
			ret.push(kv[0])
		}
		return ret
	},
	values: #[desc("Gets the dictionary's values.")]
	(self) {
		let ret = []
		for kv in self {
			ret.push(kv[1])
		}
		return ret
	},
	items: #[desc("Gets the dictionary's items.")]
	(self) {
		let ret = []
		for kv in self {
			ret.push(kv)
		}
		return ret
	},
	set: #[desc("Sets an item in the dictionary.")]
	(self, key: @string, val) {
		if self has key {
			self[key] = val
		} else {
			let self[key] = val
		}
	},
	get: #[desc("Gets an item from the dictionary.")]
	(self, key: @string, value = @dict_not_found::{}) {
		if self has key {
			return self[key]
		} else {
			if value.type == @dict_not_found {
				throw "Key doesn't exist and no fallback was provided"
			} else {
				return value
			}
		}
	},
	clear: #[desc("Clears the dictionary.")]
	(self) {
		self = {}
	},
	contains_value: #[desc("See if array contains a value.")]
	(self, value) {
		return self.values().contains(value)
	}
}
