#[no_std]
impl @array {
    max: #[desc("Gets the highest number in the array.")]
    (self, minval = -999999999999) {
        let highest = minval
        for el in self {
            if el > highest {
                highest = el
            }
        }
        return highest
    },
    min: #[desc("Gets the lowest number in the array.")]
    (self, max_val = 999999999999) {
        let lowest = max_val
        for el in self {
            if el < lowest {
                lowest = el
            }
        }
        return lowest
    },
    contains: #[desc("See if array contains an element.")]
    (self, el) {
		for e in self {
			if e == el {
				return true
			}
		}
		return false
	},
    index: #[desc("Gets the index of an element, if it doesn't exists returns null.")]
    (self, el) {
        for i in 0..self.length {
            if self[i] == el {
                return i
            }
        }
        return null
    },
    clear: #[desc("Clears the array.")]
    (self) {
        self = []
    },
    reverse: #[desc("Reverses the array.")]
    (self) {
        if self.length == 0 {
            return [];
            break
        }
        let ret = [];
        for i in 1..self.length {
            ret.push(self[-i]);
        }
        ret.push(self[0]);
        return ret;
    },
    push: #[desc("Pushes a value to the end of the array.")]
    (self, value) {
        $.append(self, value)
    },
    pop: #[desc("Removes the last value from the array and returns it.")]
    (self) {
        return $.pop(self)
    },
    remove: #[desc("Removes a specific index from the array and returns it.")]
    (self, index: @number) {
        return $.remove_index(self, index)
    },
    map: #[desc("Calls a defined callback function on each element of an array, and returns an array that contains the results.")]
    (self, cb: @macro) {
        let output = [];
        for iter in self {
            output.push(cb(iter));
        }
        return output;
    },
    filter: #[desc("Returns the elements of an array that meet the condition specified in the callback function.")]
    (self, cb: @macro) {
        let output = [];
        for iter in self {
            let r = cb(iter);
            if r.type != @bool {
                throw "Filter must return a boolean value";
            } else if r {
                output.push(iter)
            }
        }
        return output
    },
    reduce: #[desc("Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.")]
    (self, cb: @macro) {
        let acum = self[0];
        for iter in 1..self.length {
            acum = cb(acum, self[iter]);
        }
        return acum;
    },
    any: #[desc("Determines whether the specified callback function returns true for any element of an array.")]
    (self, map: @macro = (a) => @bool(a)) {
        for item in self {
            if map(item) {
                return true
            }
        }
        return false
    },
    all: #[desc("Determines whether all the members of an array satisfy the specified callback.")]
    (self, map: @macro = (a) => @bool(a)) {
        for item in self {
            if !map(item) {
                return false
            }
        }
        return true
    },
    sum: #[desc("Gets the sum of the value in the array.")]
    (self) {
        if self.all(item => item.type == @number) {
            let sum = 0
            for item in self {
                sum += item
            }
            return sum
        } else {
            throw "Unsupported type in array " + self as @string
        }
    },
    sort: #[desc("Sorts the array.")]
    (self) {
        if self.all(item => item.type == @number) {
            min = (array, maxval = 999999999999) {
                let lowest = [maxval, 0]
                for i in 0..array.length {
                    if array[i] < lowest[0] {
                        lowest = [array[i], i]
                    }
                }
                return lowest
            }
            let res = []
            let copy = self
            for _ in self {
                i = min(copy)
                res.push(i[0])
                copy.remove(i[1])
            }
            return res
        } else {
            throw "Unsupported type in array " + self as @string
        }
    }
}