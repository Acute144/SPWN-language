#[no_std]
impl @array {
    max: (self, minval = -999999999999) {
        let highest = minval
        for el in self {
            if el > highest {
                highest = el
            }
        }
        return highest
    },
    min: (self, max_val = 999999999999) {
        let lowest = max_val
        for el in self {
            if el < lowest {
                lowest = el
            }
        }
        return lowest
    },
    contains: (self, el) {
		let ret = false
		for e in self {
			if e == el {
				ret = true
				break
			}
		}
		return ret
	},
    index: (self, el) {
        let ret = null;
        for i in 0..self.length {
            if self[i] == el {
                ret = i
                break
            }
        }
        return ret
    },
    clear: (self) {
        for i in 0..self.length {
            self.pop();
        }
    },
    reverse: (self) {
        if self.length == 0 {
            return [];
            break
        }
        let ret = [];
        for i in 1..self.length {
            ret.push(self[-i]);
        }
        ret.push(self[0]);
        return ret;
    },
    push: (self, value) {
        $.append(self, value)
    },
    pop: (self) {
        return $.pop(self)
    },
    remove: (self, index: @number) {
        return $.remove_index(self, index)
    },
    map: (self, map_func: @macro) {
        let output = [];
        for iter in self {
            output.push(map_func(iter));
        }
        return output;
    },
    filter: (self, filter_func: @macro) {
        let output = [];
        for iter in self {
            let r = filter_func(iter);
            if r.type != @bool {
                throw "Filter must return a boolean value";
            } else if r {
                output.push(iter)
            }
        }
        return output
    },
    reduce: (self, reduce_func: @macro) {
        let acum = self[0];
        for iter in 1..self.length {
            acum = reduce_func(acum, self[iter]);
        }
        return acum;
    },
    any: (self, map: @macro = (a) => @bool(item)) {
        for item in self {
            if map(item) {
                return true
            }
        }
        return false
    },
    all: (self, map: @macro = (a) => @bool(item)) {
        for item in self {
            if !map(item) {
                return false
            }
        }
        return true
    }
}