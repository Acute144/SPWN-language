#[no_std]

constants = import "constants.spwn"

extract constants.obj_props
extract constants.comparisons

wait = #[desc("Adds a delay before the next triggers")] (
	#[desc("Delay time in seconds")] time: @number
){
	
	$.add( trigger{
		OBJ_ID: 1268,
		SPAWN_DURATION: time,
		TARGET: {
			return
		},
	})
	
}
call_with_delay = #[desc("Call a function after a delay")] (
	#[desc("Delay time in seconds")] time: @number, 
	#[desc("Function to call after the delay")] function: @function
) {
	$.add(trigger{
		OBJ_ID: 1268,
		SPAWN_DURATION: time,
		TARGET: function,
	})
}
return {
	wait: wait,
	call_with_delay: call_with_delay,
	
	

	supress_signal: #[desc("Stops signal from coming past for some time")] (
		#[desc("Time to supress signal")] delay: @number
	){
		//if checker is 0, a signal can come through
		//if checker is 1, it will be supressed
		checker = @counter::new(0)
		-> (){
			wait(delay * 2)
			checker.item.if_is(EQUAL_TO, 1, {
				checker.item.add(-1)
			})
		}()
		checker.item.if_is(EQUAL_TO, 0, {
			checker.item.add(1)
			return
		})
		
	
	},

	for_loop: #[desc("Implementation of a spawn loop")] 
    (
        #[desc("Start value for the iterator")] start_val: @number,
        #[desc("End value for the iterator")] end_val: @number, 
        #[desc("Macro of the code that gets looped, should take the iterator (a counter) as the first argument")] code: @macro, 
        #[desc("Delay between loops (less than 0.05 may be unstable)")] delay: @number = 0.05, 
        #[desc("Weather to reset the iterator after looping (only disable if the loop is only triggered once)")] reset: @bool = true, 
        #[desc("Operation speed of the reset of the iterator, if enabled")] reset_speed: @number = 1,
        #[desc("Incrementation of the iterator")] increment: @number = 1
    ) {
		i = @counter::new(start_val)
		$.print(reset)

        func = {
            code(i)
            i.add(increment)
            i.item.if_is(SMALLER_THAN, end_val, {
                call_with_delay(delay, func)
            })

            i.item.if_is(LARGER_THAN, end_val - 1, {
                if reset {
                    i.reset(reset_speed)
                }
                return
            })
        }

        func!
        
    }
}