
let constants = import "constants.spwn"

extract constants.obj_props
extract constants.comparisons
extract constants.easing_types

wait = #[desc("Adds a delay before the next triggers")] (
    #[desc("Delay time in seconds")] time: @number
){
    
    $.add( trigger{
        OBJ_ID: 1268,
        SPAWN_DURATION: time,
        TARGET: {
            return
        },
    })
    
}

call_with_delay = #[desc("Call a function after a delay")] (
    #[desc("Delay time in seconds")] time: @number, 
    #[desc("Function to call after the delay")] function: @function
) {
    $.add(trigger{
        OBJ_ID: 1268,
        SPAWN_DURATION: time,
        TARGET: function,
    })
}

impl @group {
    move: #[desc("Implementation of the move trigger")] 
    (
        self, 
        #[desc("Units to move on the X axis")] x: @number, 
        #[desc("Units to move on the Y axis")] y: @number, 
        #[desc("Duration of movement")] duration: @number = 0, 
        easing: @number = NONE, 
        easing_rate: @number = 2
    ) {
        $.add( trigger{
            OBJ_ID: 901,
            TARGET: self,
            MOVE_X: x * 3,
            MOVE_Y: y * 3,
            DURATION: duration,
            EASING: easing,
            EASING_RATE: easing_rate,
        })
        
        wait(duration)
    },

    stop: #[desc("Implementation of the stop trigger")]
    (self){
        $.add( trigger{
            OBJ_ID: 1616,
            TARGET: self,
        })
    },

    alpha: #[desc("Implementation of the alpha trigger")] 
    (self, opacity: @number = 1, duration: @number = 0){
        $.add( trigger {
            OBJ_ID: 1007,
            TARGET: self,
            OPACITY: opacity,
            DURATION: duration,
        })
        wait(duration)
    },

    toggle_on:
    #[desc("Toggles the group on")] 
    (self){
        $.add( trigger{
            OBJ_ID: 1049,
            TARGET: self,
            ACTIVATE_GROUP: true,
        })
    },

    toggle_off: #[desc("Toggles the group off")] 
    (self){
        $.add( trigger{
            OBJ_ID: 1049,
            TARGET: self,
            ACTIVATE_GROUP: false,
        })
    },

    rotate: #[desc("Implementation of the rotate trigger")] 
    (
        self, 
        #[desc("Group of object to rotate around")] center: @group, 
        #[desc("Rotation in degrees")] degrees: @number, 
        #[desc("Duration of rotation")] duration: @number = 0, 
        #[desc("Easing type")] easing: @number = 0, 
        #[desc("Easing rate")] easing_rate: @number = 2, 
        #[desc("Only rotate positions of the objects, not the textures")] lock_object_rotation: @bool = false
    ){
        $.add( trigger{
            OBJ_ID: 1346,
            TARGET: self,
            CENTER: center,
            ROTATE_DEGREES: degrees,
            DURATION: duration,
            EASING: easing,
            EASING_RATE: easing_rate,
            LOCK_OBJECT_ROTATION: lock_object_rotation
        })
        wait(duration)
    },

    follow: 
    #[desc("Implementation of the follow trigger")]
    (
        self, 
        #[desc("Group of object to follow")] other: @group, 
        #[desc("Multiplier for the movement on the X-axis")] x_mod: @number = 1, 
        #[desc("Multiplier for the movement on the Y-axis")] y_mod: @number = 1, 
        #[desc("Duration of following")] duration: @number = 999
    ){
        $.add( trigger{
            OBJ_ID: 1347,
            X_MOD: x_mod,
            Y_MOD: y_mod,
            DURATION: duration,
            TARGET: self,
            FOLLOW: other,
        })
        //wouldnt make any sense to wait out the duration here
    },

    follow_player_y:
    #[desc("Implementation of the follow player Y trigger")] 
    (
        self, 
        #[desc("Interpolation factor (?)")] speed: @number = 1, 
        #[desc("Delay of movement")]  delay: @number = 0, 
        #[desc("Offset on the Y-axis")] offset: @number = 0, 
        #[desc("Maximum speed")] max_speed: @number = 0, 
        #[desc("Duration of following")] duration: @number = 999
    ){
        $.add( trigger{
            OBJ_ID: 1814,
            SPEED : speed,
            DELAY : delay,
            Y_OFFSET : offset,
            MAX_SPEED : max_speed,
            DURATION: duration,
        })
        //wouldnt make any sense to wait out the duration here
    },

    move_to: 
    #[desc("Implementation of the 'Move target' feature of the move trigger")]
    (
        self, 
        #[desc("Group of the object to move to")] target: @group, 
        #[desc("Duration of movement")] duration: @number = 0,
        #[desc("Will move to the object only on the X-axis")] x_only: @bool = false, 
        #[desc("Will move to the object only on the y-axis")] y_only: @bool = false, 
        #[desc("Easing type")] easing: @number = NONE, 
        #[desc("Easing rate")] easing_rate: @number = 2
    ) {
        $.add( trigger{
            OBJ_ID: 901,
            TARGET: self,
            USE_TARGET: true,

            TARGET_POS_AXES: (){
                if x_only && y_only {
                    return 0
                } else if x_only {
                    return 1
                } else if y_only {
                    return 2
                } else {
                    return 0
                }
            }(),
            TARGET_POS: target,
            
            DURATION: duration,
            EASING: easing,
            EASING_RATE: easing_rate,
        })
        wait(duration)
    },

    pulse: 
    #[desc("Implementation of the pulse trigger for groups")]
    (
        self, 
        #[desc("Red value of pulse color (or hue if HSV is enabled)")] r: @number, 
        #[desc("Green value of pulse color (or saturation if HSV is enabled)")] g: @number, 
        #[desc("Blue value of pulse color (or brightness/value if HSV is enabled)")] b: @number, 
        #[desc("Fade-in duration")] fade_in: @number = 0, 
        #[desc("Duration to hold the color")] hold: @number = 0, 
        #[desc("Fade-out duration")] fade_out: @number = 0, 
        #[desc("Weather to prioritize this pulse over simultaneous pulses")] exclusive: @bool = false,
        #[desc("Toggle HSV mode")] hsv: @bool = false
    ) {
        $.add( trigger{
            OBJ_ID: 1006,
            TRIGGER_RED: r,
            TRIGGER_GREEN: g,
            TRIGGER_BLUE: b,
            EXCLUSIVE: exclusive,
            FADE_IN: fade_in,
            HOLD: hold,
            FADE_OUT: fade_out,
            TARGET_COLOR: self,
            PULSE_MODE: hsv,
            TARGET_TYPE: 1 //group
        })
        wait(fade_in + hold + fade_out)
    }


}



impl @color {
    set: 
    #[desc("Implementation of the color trigger")]
    (
        self, 
        #[desc("Red value of the target color")] r: @number, 
        #[desc("Green value of the target color")] g: @number, 
        #[desc("Blue value of the target color")] b: @number, 
        #[desc("Duration of color change")] duration: @number = 0, 
        #[desc("Opacity of target color")] opacity: @number = 1, 
        #[desc("Toggle blending on target color")] blending: @bool = false
    ){
        $.add( trigger{
            OBJ_ID: 899,
            DURATION: duration,
            TRIGGER_RED: r,
            TRIGGER_GREEN: g,
            TRIGGER_BLUE: b,
            OPACITY: opacity,
            BLENDING: blending,
            TARGET_COLOR: self,
        })
        wait(duration)
    },

    pulse: #[desc("Implementation of the pulse trigger for colors")]
    (
        self, 
        #[desc("Red value of pulse color (or hue if HSV is enabled)")] r: @number, 
        #[desc("Green value of pulse color (or saturation if HSV is enabled)")] g: @number, 
        #[desc("Blue value of pulse color (or brightness/value if HSV is enabled)")] b: @number, 
        #[desc("Fade-in duration")] fade_in: @number = 0, 
        #[desc("Duration to hold the color")] hold: @number = 0, 
        #[desc("Fade-out duration")] fade_out: @number = 0, 
        #[desc("Weather to prioritize this pulse over simultaneous pulses")] exclusive: @bool = false,
        #[desc("Toggle HSV mode")] hsv: @bool = false
    ) {
        $.add( trigger{
            OBJ_ID: 1006,
            TRIGGER_RED: r,
            TRIGGER_GREEN: g,
            TRIGGER_BLUE: b,
            EXCLUSIVE: exclusive,
            FADE_IN: fade_in,
            HOLD: hold,
            FADE_OUT: fade_out,
            TARGET: self,
            PULSE_MODE: hsv,
            //TARGET_TYPE: 0 //color
        })
        wait(fade_in + hold + fade_out)
    }
}

/*impl @function {

    stop:

    (self) {
        self.group.stop()
    }
}*/



impl @item {
    
    add:
    #[desc("Implementation of the pickup trigger")]
    (self, #[desc("Amount to add")] amount: @number) {
        $.add( trigger{
            OBJ_ID: 1817,
            COUNT: amount,
            ITEM: self,
        })
    },

    if_is:
    #[desc("Implementation of the instant count trigger")]
    (
        self, 
        #[desc("Comparison mode")] comparison: @number, 
        #[desc("Number to compare with")] other: @number, 
        #[desc("Target function if comparison is 'true'")] function: @function
    ) {
        $.add( trigger{
            OBJ_ID: 1811,
            TARGET: function,
            COUNT: other,
            ACTIVATE_GROUP: 1, 
            COMPARISON: comparison, 
            ITEM: self,
        })
    },

    count:
    #[desc("Implementation of the count trigger (returns an event)")]
    (
        self, 
        #[desc("Number to check against")] number: @number = 0
    ) {
        return (function) {
            $.add( trigger{
                OBJ_ID: 1611,
                TARGET: function,
                COUNT: number,
                ACTIVATE_GROUP: 1, 
                ITEM: self,
                COUNT_MULTI_ACTIVATE: true,
                
            })
        }
    },
}

type counter
    
supress_signal = #[desc("Stops signal from coming past for some time")] (
    #[desc("Time to supress signal")] delay: @number
){
    //if checker is 0, a signal can come through
    //if checker is 1, it will be supressed
    checker = counter(0)
    -> (){
        wait(delay * 2)
        checker.item.if_is(EQUAL_TO, 1, {
            checker.item.add(-1)
        })
    }()
    checker.item.if_is(EQUAL_TO, 0, {
        checker.item.add(1)
        return
    })
    

}

let DEFAULT_SPEED = 3


impl @counter {

    new: #[desc("Creates a new counter")] (
        #[desc("Source (can be a number, item ID or boolean)")] source = 0
    ){
        if source.type == @number {
            id = ?i
        
            id.add(source)
            
            return {
                type: @counter,
                item: id
            }
        } else if source.type == @item {
            return {
                type: @counter,
                item: source
            }
        } else if source.type == @bool {
            id = ?i
        
            if source {
                id.add(1)
            }
            return {
                type: @counter,
                item: id
            }
        } else {
            error "Can not make counter from this type"
        }
        
    },

    add_to: 
    #[desc("Adds the counter's value to all item IDs in a list, and resets the counter to 0 in the process")]
    (
        self, 
        #[desc("Item IDs to add to")] items: @array, 
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED, 
        #[desc("Multiplyer for the value added")] factor: @number = 1
    ) {
        add = {
            
            
            mini_add = (num){
                self.item.if_is(LARGER_THAN, num - 1, {
                    self.item.add(-num)
                    for item in items {
                        item.add(num * factor)
                    }
                    call_with_delay(0.05, add)
                })
            }

            for i in 0..speed {
                mini_add(3^i)
            }
                
                
            
            self.item.if_is(EQUAL_TO, 0, {
                wait(0.05)
                supress_signal(0.06)
                return
            })
        }
        add!
    },

    subtract_from:
    #[desc("Subtracts the counter's value from all item IDs in a list, and resets the counter to 0 in the process")]
    (
        self, 
        #[desc("Item IDs to add to")] items: @array, 
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED
    ) {
        sub = {
            
            self.item.if_is(LARGER_THAN, 0, {
                mini_sub = (num){
                    self.item.if_is(LARGER_THAN, num - 1, {
                        self.item.add(-num)
                        for item in items {
                            item.add(-num)
                        }
                        call_with_delay(0.05, sub)
                    })
                }

                for i in 0..speed {
                    mini_sub(2^i)
                }
                
                
            })
            self.item.if_is(EQUAL_TO, 0, {
                wait(0.05)
                supress_signal(0.06)
                return
            })
        }
        sub!
    },

    multiply:
    #[desc("Multiplies the value of the counter by some factor")]
    (
        self,
        #[desc("Factor to multiply by, either another counter (very expensive) or a normal number")] factor,
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED
    ) {
        if factor.type == @number {
            temp = counter(0)
            self.add_to([temp.item], speed, factor)
            temp.add_to([self.item], speed)
        } else if factor.type == @counter {
            
            temp = counter(0)
            mini_mult = (num){
                mult = {
                    
                    self.item.if_is(LARGER_THAN, num - 1, {
                        self.item.add(-num)
                        factor.copy_to(temp.item, speed, num)
                        
                        
                        call_with_delay(0.1, mult)
                    })
                        
                    self.item.if_is(SMALLER_THAN, num, {
                        wait(0.1)
                        supress_signal(0.11)
                        return
                    })
                }
                mult!
            }
            

            for i in speed..0 {
                mini_mult(2^i)
            }
            
            
            -> factor.reset(speed)
            temp.add_to([self.item], speed * 2)
            
        }
    },


    divide: #[desc("Devides the value of the counter by some divisor")]
    (
        self, 
        #[desc("Divisor to divide by, either another counter (very expensive) or a normal number")] divisor,
        #[desc("Counter to set to the remainder value")] remainder: @counter = {id: ?i, type: @counter},
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED, 
        
    ) {
        

        if divisor.type == @number {
            result = counter(0)

            div = {
                mini_div = (num) {
                    self.item.if_is(LARGER_THAN, (divisor * num) - 1, {
                        
                        
                        self.item.add(-(divisor * num))
                        result.item.add(num)
                        
                        call_with_delay(0.05, div)
                        
                    })
                }

                for i in 0..speed {
                    mini_div(i * 4 + 1)
                }

                self.item.if_is(SMALLER_THAN, divisor, {
                    
                    wait(0.05)
                    self.add_to([remainder.item], speed)
                    result.add_to([self.item], speed)
                    supress_signal(0.06)
                    return remainder
                })
            }
            div!
        } else if divisor.type == @counter {
            result = counter(0)
            remainder.reset(speed)

            // IDEA:
            // every time it goes under, undo the previous operation to simulate comparison
            
            mini_div = (num){
                div = {
                    
                    
                    self.item.if_is(LARGER_THAN, 0, {
                        //this basically subtracts divisor * num from self
                        (){
                            temp_storage = ?i
                            cas = {
                                mini_cas = (num2){
                                    divisor.item.if_is(LARGER_THAN, num2 - 1, {
                                        divisor.item.add(-num2)
                                        temp_storage.add(num2)
                                        self.item.add(-(num2 * num))


                                        
                                        call_with_delay(0.05, cas)
                                    })
                                }
                    
                                for i in 0..speed {
                                    mini_cas(3^i)
                                }
                                    
                                divisor.item.if_is(EQUAL_TO, 0, {
                                    wait(0.1)
                                    supress_signal(0.11)
                                    counter(temp_storage).add_to([divisor.item], speed*2)
                                    return
                                })
                            }
                            cas!
                        }()
                        result.item.add(num)
                        call_with_delay(0.1, div)
                    })

                    self.item.if_is(SMALLER_THAN, 1, {

                        ret = {
                            supress_signal(0.11)
                            wait(0.1)
                            return
                        }
                        
                        supress_signal(0.06)
                        self.item.if_is(SMALLER_THAN, 0, {
                            result.item.add(-num)
                            wait(0.1)
                            divisor.copy_to(self.item, speed*2, factor = num)
                            ret!
                        })
                        self.item.if_is(EQUAL_TO, 0, ret)
                        
                    })

                    
                }
                div!
            }
            

            
            for i in speed..0 {
                mini_div(8^i)
                wait(0.1)
            }
            -> divisor.reset(speed)
            self.add_to([remainder.item], speed*2)
            
            result.add_to([self.item], speed*2)
            wait(0.2)
            return remainder
            
            
         
        }

        
    },

    //will consume both numbers
    compare: (self, other, speed = DEFAULT_SPEED) {
        other.subtract_from([self.item], speed)
        if self == 0 {
            return 0
        } else if self > 0 {
            return 1
        } else {
            return -1
        }
    },

    reset: #[desc("Resets counter to 0")]
    (
        self, 
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED
    ){
        //almost the same
        add = {
            self.item.if_is(LARGER_THAN, 0, {
                mini_add = (num){
                    self.item.if_is(LARGER_THAN, num - 1, {
                        self.item.add(-num)
                        call_with_delay(0.05, add)
                    })
                }

                for i in 0..speed {
                    mini_add(3^i)
                }
                
                
            })
            self.item.if_is(EQUAL_TO, 0, {
                wait(0.05)
                supress_signal(0.05)
                return
            })
        }
        add!
    },

    copy_to: #[desc("Copies the value of the counter to another item ID, without consuming the original")] 
    (
        self, 
        #[desc("Item ID to copy to")]  item: @item, 
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED, 
        #[desc("Factor of to multiply the copy by")] factor: @number = 1
    ) {
        temp_storage = ?i
        
        add = {
            
            self.item.if_is(LARGER_THAN, 0, {
                mini_add = (num){
                    
                    self.item.if_is(LARGER_THAN, num - 1, {
                        self.item.add(-num)
                        
                        item.add(num * factor)
                        temp_storage.add(num)
                        
                        call_with_delay(0.05, add)
                    })
                }

                for i in 0..speed {
                    mini_add(2^i)
                }
                
                
            })
            self.item.if_is(EQUAL_TO, 0, {
                wait(0.05)
                supress_signal(0.06)
                counter(temp_storage).add_to([self.item], speed)
                return
            })
        }
        add! 
    },

    clone: #[desc("Copies the counter and returns the copy")] (
        self, 
        #[desc("Speed of operation (higher number increases group usage)")] speed: @number = DEFAULT_SPEED
    ) {
        new_counter = ?i
        self.copy_to(new_counter, speed)
        return counter(new_counter)
    },

    _plus_: (self, other) {
        if other.type == @number {
            new_counter = self.clone()
            new_counter.item.add(other)
            return new_counter
        } else if other.type == @counter {
            new_counter = self.clone()
            other.clone().add_to([new_counter.item])
            return new_counter
        } else {
            error "Cannot add counter with this type"
        }
    },

    _minus_: (self, other) {
        if other.type == @number {
            new_counter = self.clone()
            new_counter.item.add(-other)
            return new_counter
        } else {
            error "Cannot subtract counter with this type"
        }
    },

    _more_than_: (self, other) {
        //TODO: add case for another counter
        if other.type == @number {
            self.item.if_is(LARGER_THAN, other, {
                return true
            })

            self.item.if_is(SMALLER_THAN, other + 1, {
                return false
            })
        } else if other.type == @counter {
            self_clone = self.clone()
            other_clone = other.clone()
            cmp = self_clone.compare(other_clone)
            return cmp == 1
        } else {
            error "Cannot compare counter with this type"
        }
    },

    _less_than_: (self, other) {
        //TODO: add case for another counter
        if other.type == @number {
            self.item.if_is(SMALLER_THAN, other, {
                return true
            })

            self.item.if_is(LARGER_THAN, other - 1, {
                return false
            })
        } else if other.type == @counter {
            self_clone = self.clone()
            other_clone = other.clone()
            cmp = self_clone.compare(other_clone)
            return cmp == -1
        } else {
            error "Cannot compare counter with this type"
        }
    },

    _more_or_equal_: (self, other) {
        //TODO: add case for another counter
        if other.type == @number {
            self.item.if_is(LARGER_THAN, other - 1, {
                return true
            })

            self.item.if_is(SMALLER_THAN, other, {
                return false
            })
        } else if other.type == @counter {
            self_clone = self.clone()
            other_clone = other.clone()
            cmp = self_clone.compare(other_clone)
            return cmp == 1 || cmp == 0
        } else {
            error "Cannot compare counter with this type"
        }
    },

    _less_or_equal_: (self, other) {
        //TODO: add case for another counter
        if other.type == @number {
            self.item.if_is(SMALLER_THAN, other + 1, {
                return true
            })

            self.item.if_is(LARGER_THAN, other, {
                return false
            })
        } else if other.type == @counter {
            self_clone = self.clone()
            other_clone = other.clone()
            cmp = self_clone.compare(other_clone)
            return cmp == -1 || cmp == 0
        } else {
            error "Cannot compare counter with this type"
        }
    },

    _equal_: (self, other) {
        if other.type == @number {
            self.item.if_is(EQUAL_TO, other, {
                return true
            })

            ret_false = {
                return false
            }

            self.item.if_is(LARGER_THAN, other, ret_false)
            self.item.if_is(SMALLER_THAN, other, ret_false)
        } else if other.type == @counter {
            self_clone = self.clone()
            other_clone = other.clone()
            cmp = self_clone.compare(other_clone)
            return cmp == 0
        } else {
            error "Cannot compare counter with this type"
        }
    },

    _not_equal_: (self, other) {
        return !(self == other)
    },

    add: #[desc("Implementation of the pickup trigger")]
    (self, #[desc("Amount to add")] num: @number) {
        self.item.add(num)
    },

    _add_: (self, num) {
        if num.type == @number {
            self.add(num)
        } else if num.type == @counter {
            num.clone().add_to([self])
        } else {
            error "Cannot add this type to counter"
        }
    },

    _subtract_: (self, num) {
        if num.type == @number {
            self.add(-num)
        } else if num.type == @counter {
            num.clone().subtract_from([self])
        } else {
            error "Cannot subtract this type from counter"
        }
    },

    _multiply_: (self, num) {
        
        if num.type == @number {
            self.multiply(num)
        }/* else if num.type == @counter {
            self.multiply(num.clone())
        } else {
            error "Cannot multiply counter by this type"
        }*/
    },

    _divide_: (self, num) {
        if num.type == @number {
            self.divide(num)
        } else if num.type == @counter {
            self.divide(num.clone())
        } else {
            error "Cannot divide counter by this type"
        }
    },

    _assign_: (self, num) {
        self.reset()
        if num.type == @number {
            self.item.add(num)
        } else if num.type == @counter {
            num.clone().add_to([self])
        } else {
            error "Cannot assign this type to counter"
        }
    },

    

    to_const: #[desc("Converts the counter into a normal number (very context-splitting, be careful)")] (
        self, 
        #[desc("Array of possible output values")] range: @array
    ) {
        for val in range {
            -> self.item.if_is(EQUAL_TO, val, {
                return val
            }) 
        }
    },
    

    _as_: (self, _type: @type_indicator) {
        if _type == @bool {
            return self.to_const([0, 1]) == 1
        } else {
            error "Cannot convert to this type (counter can convert to a number using the counter.to_const macro)"
        }
    }
}

impl @array {
    max: (self, minval = 0) {
        let highest = minval
        for el in self {
            if el > highest {
                highest = el
            }
        }
        return highest
    },
    min: (self, max_val = 999999999999) {
        let lowest = max_val
        for el in self {
            if el < lowest {
                lowest = el
            }
        }
        return lowest
    }
}





general_functions = {
    
    shake: #[desc("Implementation of the shake trigger")]
    (
        #[desc("Strength value")] strength: @number = 1,
        #[desc("Interval value")] interval: @number = 0,
        #[desc("Duration of shake")] duration: @number = 0.5
    ){
        $.add( trigger {
            OBJ_ID: 1520,
            STRENGTH: strength,
            INTERVAL: interval,
            DURATION: duration,
        })
        wait(duration)
    },

    disable_trail: #[desc("Disables the player's trail")] (){
        $.add( trigger{
            OBJ_ID: 33,
        })
    },

    enable_trail: #[desc("Enables the player's trail")] (){
        $.add( trigger{
            OBJ_ID: 32,
        })
    },

    show_player: #[desc("Shows the player")] (){
        $.add( trigger{
            OBJ_ID: 1613,
        })
    },
    
    hide_player: #[desc("Hides the player")] (){
        $.add( trigger{
            OBJ_ID: 1612,
        })
    },

    toggle_bg_effect: #[desc("Implementation of the bg effect on/off triggers")] (
        #[desc("Weather to toggle bg effect on or off")] on: @bool = false
    ) {
        if on {
            $.add( trigger{
                OBJ_ID: 1818,
            })
        } else {
            $.add( trigger{
                OBJ_ID: 1819,
            })
        }
    },

    loop: #[desc("Implementation of a spawn loop")] 
    (
        #[desc("Start value for the iterator")] start_val: @number,
        #[desc("End value for the iterator")] end_val: @number, 
        #[desc("Macro of the code that gets looped, should take the iterator (a counter) as the first argument")] code: @macro, 
        #[desc("Delay between loops (less than 0.05 may be unstable)")] delay: @number = 0.05, 
        #[desc("Weather to reset the iterator after looping (only disable if the loop is only triggered once)")] reset: @bool = true, 
        #[desc("Operation speed of the reset of the iterator, if enabled")] reset_speed: @number = 1,
        #[desc("Incrementation of the iterator")] increment: @number = 1
    ) {
        i = counter(start_val)

        func = {
            code(i)
            i.add(increment)
            i.item.if_is(SMALLER_THAN, end_val, {
                call_with_delay(delay, func)
            })

            i.item.if_is(LARGER_THAN, end_val - 1, {
                if reset {
                    i.reset(reset_speed)
                }
                return
            })
        }

        func!
        
    }
        
}

// An event in spwn is a macro that returns a macro with one argument
// which is the function that gets triggered on the event

on = #[desc("Triggers a function every time an event fires")] (
    #[desc("Event to trigger on")] event: @macro, 
    #[desc("Function to trigger")] function: @function
){
    event(function)
}

events = {
    
    touch: #[desc("Implementation of the touch trigger (returns an event)")] (
        #[desc("Dual mode (only check for touch on the dual side)")] dual_side = false
    ) {
        return (function){
            $.add( trigger{
                OBJ_ID: 1595,
                HOLD_MODE: true,
                TOGGLE_MODE: 1,
                TARGET: function,
                DUAL_MODE: dual_side,
                
            })
        }
    },

    touch_end: #[desc("Returns an event for when a touch ends")] (
        #[desc("Dual mode (only check for touch on the dual side)")] dual_side = false
    ) {
        return (function){
            $.add( trigger{
                OBJ_ID: 1595,
                HOLD_MODE: true,
                TOGGLE_MODE: 2,
                TARGET: function,
                DUAL_MODE: dual_side,
                
            })
        }
    },

    collision: #[desc("Implementation of the collision trigger (returns an event)")] (
        #[desc("Block A ID")] a, 
        #[desc("Block B ID")] b
    ) {
        return (function){
            $.add( trigger{
                OBJ_ID: 1815,
                BLOCK_A: a,
                BLOCK_B: b,
                ACTIVATE_GROUP: true,
                TARGET: function,
                
            })
        }
    },

    collision_exit: #[desc("Returns an event for when a collision exits")] (
        #[desc("Block A ID")] a, 
        #[desc("Block B ID")] b
    ) {
        return (function){
            $.add( trigger{
                OBJ_ID: 1815,
                BLOCK_A: a,
                BLOCK_B: b,
                ACTIVATE_GROUP: true,
                ACTIVATE_ON_EXIT: true,
                TARGET: function,
                
            })
        }
    },

    death: #[desc("Returns an event for when the player dies")] (){
        return (function) {
            $.add( trigger{
                OBJ_ID: 1812,
                ACTIVATE_GROUP: true,
                TARGET: function
            })
        }
    }
}

impl @block {
    create_tracker_item: #[desc("Returns an item ID that is 1 when the blocks are colliding and 0 when they are not")] 
    (
        self, 
        #[desc("Block ID to check against")] other
    ) {
        item = ?i
        on(events.collision(self, other), {
            item.add(1)
        })

        on(events.collision_exit(self, other), {
            item.add(-1)
        })

        return item
    }
}


return {
    obj_props: constants.obj_props,
    ..constants.easing_types,
    ..constants.comparisons,
    ..constants.colors,
    ..general_functions,
    ..events,
    
    wait: wait,
    supress_signal: supress_signal,

    counter: @counter::new,
    call_with_delay: call_with_delay,
    on: on,

    operation_scale: (new: @number) {
        DEFAULT_SPEED = new
    }
}


